import React from "react";

interface StarRatingProps {
  rating: number; // The current rating (e.g., 4.5)
  maxStars?: number; // The maximum number of stars (default is 5)
}

const StarRating: React.FC<StarRatingProps> = ({ rating, maxStars = 5 }) => {
  const renderStars = () => {
    const stars = [];
    for (let i = 1; i <= maxStars; i++) {
      if (i <= Math.floor(rating)) {
        stars.push(
          <span key={i} className="text-yellow-500 fill:text-[#FF8D4D]">
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.27448 1.9429C7.04717 0.624933 8.95248 0.624932 9.72517 1.9429L10.8021 3.7798C11.0841 4.26076 11.554 4.6022 12.0986 4.72175L14.1784 5.17833C15.6706 5.50593 16.2594 7.31799 15.2447 8.46014L13.8305 10.052C13.4602 10.4688 13.2807 11.0212 13.3353 11.5761L13.5437 13.6952C13.6933 15.2156 12.1518 16.3355 10.752 15.7234L8.8011 14.8704C8.29026 14.647 7.70938 14.647 7.19855 14.8704L5.2476 15.7234C3.8478 16.3355 2.30637 15.2156 2.45593 13.6952L2.66438 11.5761C2.71896 11.0212 2.53946 10.4688 2.16916 10.052L0.75496 8.46014C-0.259726 7.31799 0.329047 5.50593 1.82128 5.17833L3.90106 4.72175C4.44563 4.6022 4.91557 4.26076 5.19755 3.7798L6.27448 1.9429Z"
                fill="currentColor"
              />
            </svg>
          </span>
        ); // Filled star
      } else if (i === Math.ceil(rating) && rating % 1 !== 0) {
        stars.push(
          <span key={i} className="text-yellow-500 fill:text-[#FF8D4D]">
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.27448 1.9429C7.04717 0.624933 8.95248 0.624932 9.72517 1.9429L10.8021 3.7798C11.0841 4.26076 11.554 4.6022 12.0986 4.72175L14.1784 5.17833C15.6706 5.50593 16.2594 7.31799 15.2447 8.46014L13.8305 10.052C13.4602 10.4688 13.2807 11.0212 13.3353 11.5761L13.5437 13.6952C13.6933 15.2156 12.1518 16.3355 10.752 15.7234L8.8011 14.8704C8.29026 14.647 7.70938 14.647 7.19855 14.8704L5.2476 15.7234C3.8478 16.3355 2.30637 15.2156 2.45593 13.6952L2.66438 11.5761C2.71896 11.0212 2.53946 10.4688 2.16916 10.052L0.75496 8.46014C-0.259726 7.31799 0.329047 5.50593 1.82128 5.17833L3.90106 4.72175C4.44563 4.6022 4.91557 4.26076 5.19755 3.7798L6.27448 1.9429Z"
                fill="currentColor"
              />
            </svg>
          </span>
        ); // Half-filled star (same logic could be enhanced for a custom design)
      } else {
        stars.push(
          <span key={i} className="text-gray-300 fill:text-gray-300">
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.27448 1.9429C7.04717 0.624933 8.95248 0.624932 9.72517 1.9429L10.8021 3.7798C11.0841 4.26076 11.554 4.6022 12.0986 4.72175L14.1784 5.17833C15.6706 5.50593 16.2594 7.31799 15.2447 8.46014L13.8305 10.052C13.4602 10.4688 13.2807 11.0212 13.3353 11.5761L13.5437 13.6952C13.6933 15.2156 12.1518 16.3355 10.752 15.7234L8.8011 14.8704C8.29026 14.647 7.70938 14.647 7.19855 14.8704L5.2476 15.7234C3.8478 16.3355 2.30637 15.2156 2.45593 13.6952L2.66438 11.5761C2.71896 11.0212 2.53946 10.4688 2.16916 10.052L0.75496 8.46014C-0.259726 7.31799 0.329047 5.50593 1.82128 5.17833L3.90106 4.72175C4.44563 4.6022 4.91557 4.26076 5.19755 3.7798L6.27448 1.9429Z"
                fill="currentColor"
              />
            </svg>
          </span>
        ); // Empty star
      }
    }
    return stars;
  };

  return <div className="flex justify-center">{renderStars()}</div>;
};

export default StarRating;
